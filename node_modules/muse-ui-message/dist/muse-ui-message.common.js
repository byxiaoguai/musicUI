/* muse-ui-message myron.liu version 0.2.1 */
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Vue = _interopDefault(require('vue'));

var config = {
  successIcon: 'check_circle',
  infoIcon: 'info',
  warningIcon: 'priority_high',
  errorIcon: 'warning',
  iconSize: 24,
  width: 350,
  maxWidth: '80%',
  className: '',
  okLabel: '确定',
  cancelLabel: '取消',
  transition: 'scale' // 'slide-top', 'slide-bottom', 'slide-left', 'slide-right', 'fade', 'scale'
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var ModalOpt = {
  name: 'mu-modal',
  props: {
    title: String,
    icon: String,
    iconSize: Number,
    mode: {
      type: String,
      default: 'alert',
      validator: function validator(val) {
        return ['alert', 'confirm', 'prompt'].indexOf(val) !== -1;
      }
    },
    type: {
      type: String,
      default: '',
      validator: function validator(val) {
        return ['', 'success', 'info', 'warning', 'error'].indexOf(val) !== -1;
      }
    },
    content: [String, Function],
    width: [Number, String],
    maxWidth: [Number, String],
    className: String,
    transition: String,
    beforeClose: Function,
    okLabel: String,
    cancelLabel: String,
    inputType: String,
    inputPlaceholder: String,
    inputValue: [String, Number],
    validator: Function
  },
  data: function data() {
    return {
      open: false,
      value: this.inputValue,
      errorText: ''
    };
  },

  methods: {
    handleClose: function handleClose(result) {
      var _this = this;

      if (this.beforeClose) {
        return this.beforeClose(result, this, function () {
          return _this.close(result);
        });
      }
      return this.close(result);
    },
    close: function close(isOk) {
      if (isOk && this.mode === 'prompt' && this.validator) {
        var result = this.validator(this.value);
        if (!result.valid) {
          this.errorText = result.message;
          return;
        }
        this.errorText = '';
      }
      this.open = false;
      this.$emit('close', isOk, this.value);
      return isOk;
    },
    createInput: function createInput(h) {
      var _this2 = this;

      if (this.mode !== 'prompt') return;
      return h('mu-text-field', {
        attrs: {
          type: this.inputType,
          placeholder: this.inputPlaceholder
        },
        props: {
          value: this.value,
          errorText: this.errorText,
          fullWidth: true
        },
        on: {
          input: function input(val) {
            return _this2.value = val;
          },
          keydown: function keydown(e) {
            if (e.keyCode === 13) {
              _this2.handleClose(true);
            }
          }
        }
      });
    },
    createContent: function createContent(h) {
      var content = typeof this.content === 'function' ? this.content(h) : this.content;
      return h('div', {
        class: 'mu-modal-content'
      }, [this.icon ? h('mu-icon', {
        staticClass: 'mu-modal-icon',
        props: {
          value: this.icon,
          color: this.type,
          size: this.iconSize
        }
      }) : undefined, h('div', {
        staticClass: 'mu-modal-inner'
      }, [content, this.createInput(h)])]);
    },
    createActions: function createActions(h) {
      var _this3 = this;

      var actions = [];
      actions.push(h('mu-button', {
        props: {
          flat: true,
          color: 'primary'
        },
        slot: 'actions',
        on: {
          click: function click() {
            return _this3.handleClose(true);
          }
        }
      }, this.okLabel));
      if (this.mode !== 'alert') {
        actions.unshift(h('mu-button', {
          props: {
            flat: true
          },
          slot: 'actions',
          on: {
            click: function click() {
              return _this3.handleClose(false);
            }
          }
        }, this.cancelLabel));
      }
      return actions;
    }
  },
  render: function render(h) {
    return h('mu-dialog', {
      props: {
        open: this.open,
        title: this.title,
        width: this.width,
        maxWidth: this.maxWidth,
        dialogClass: this.className,
        transition: this.transition,
        overlayClose: false,
        escPressClose: false
      }
    }, [this.createContent(h)].concat(toConsumableArray(this.createActions(h))));
  }
};

var Modal = Vue.extend(ModalOpt);

var isServer = typeof window === 'undefined';
var instances = [];
var Message = function Message(options) {
  if (isServer) return;
  return new Promise(function (resolve) {
    var modal = new Modal({
      el: document.createElement('div'),
      propsData: _extends({}, config, {
        icon: config[options.type + 'Icon'] || ''
      }, options)
    });
    document.body.appendChild(modal.$el);
    modal.open = true;
    if (modal.mode === 'prompt') {
      setTimeout(function () {
        modal.$el && modal.$el.querySelector('input').focus();
      }, 200);
    }

    instances.push(modal);
    modal.$on('close', function (result, value) {
      setTimeout(function () {
        modal.$el && modal.$el.parentNode && modal.$el.parentNode.removeChild(modal.$el);
        modal.$destroy();
        modal = null;
      }, 500);

      var index = instances.indexOf(modal);
      if (index !== -1) {
        instances.splice(index, 1);
      }
      return resolve({ result: result, value: value });
    });
  });
};

Message.config = function (options) {
  if (!options || Array.isArray(options) || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') return config;
  for (var key in options) {
    if (!options.hasOwnProperty(key)) continue;
    config[key] = options[key];
  }
  return config;
};

Message.close = function () {
  instances.forEach(function (modal) {
    modal.close(false);
  });
};

['alert', 'confirm', 'prompt'].forEach(function (mode) {
  Message[mode] = function (content, options) {
    if (!content && arguments.length < 2) return;
    var title = '';
    switch (arguments.length) {
      case 1:
        options = {};
        break;
      case 2:
        if (typeof options === 'string') {
          title = options;
          options = {};
        }
        break;
      default:
        title = arguments[1];
        options = arguments[2];
        break;
    }
    return Message(_extends({
      title: title,
      content: content
    }, options, {
      mode: mode
    }));
  };
});

Message.install = function (Vue$$1, options) {
  Message.config(options);
  Vue$$1.prototype.$message = Message;
  Vue$$1.prototype.$alert = Message.alert;
  Vue$$1.prototype.$confirm = Message.confirm;
  Vue$$1.prototype.$prompt = Message.prompt;
};

module.exports = Message;
